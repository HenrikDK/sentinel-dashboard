<template id="deployment-badge">
  <div class="self-center hover:bg-gray-100 w-60 flex items-center">
    <div class="pl-2">
      <template v-if="deployment.metrics && deployment.alerts.length === 0">
        <div class="flex bg-green-600 w-10 h-10 my-1 items-center justify-center text-white"
             :class="isCurrent(deployment.instance.metric.aks_deployed) ? 'animate-pulse' : ''">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"/>
          </svg>
        </div>
      </template>
    
      <template v-else-if="deployment.alerts.length > 0">
        <div class="flex bg-red-600 w-10 h-10 my-1 items-center justify-center text-white">
          <span class="animate-ping absolute inline-flex h-8 w-8 rounded bg-red-600 opacity-75"></span>
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5"/>
          </svg>
        </div>
      </template>
    
      <template v-else>
        <div class="flex bg-orange-500 animate-[wiggle_1s_ease-in-out_infinite] w-10 h-10 my-1 items-center justify-center text-white">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9 5.25h.008v.008H12v-.008z"/>
          </svg>
        </div>
      </template>
    </div>

    <div class="pl-2 py-1">
      <div class="text-sm w-44 truncate font-bold">{{ deployment.instance.metric.aks_version }}</div>
      <div class="text-xs text-gray-500"
           :class="[isCurrent(deployment.instance.metric.aks_deployed) ? 'font-bold' : '']">
        {{ toDateString(deployment.instance.metric.aks_deployed) }}
      </div>
      <div class="text-xs w-40 truncate text-gray-500">{{ deployment.instance.metric.github_branch }}</div>
    </div>
  </div>
</template>

<script type="module">
let setup = () => {
  let toDateString = (value) => {
    const now = luxon.DateTime.local();
    const past = luxon.DateTime.fromSeconds(Number(value)).setLocale('da-dk');
    const diff = past.diff(now, 'minutes');
    if (Math.abs(diff.minutes) < 1){
      return 'Just now!'
    }
    if (Math.abs(diff.minutes) < 5){
      return past.toRelative({unit: 'minutes', locale: "en"});
    }
  
    return past.toFormat('y-LL-dd HH:mm')
  }
  
  let isCurrent = (value) => {
    const now = luxon.DateTime.local();
    const past = luxon.DateTime.fromSeconds(Number(value)).setLocale('da-dk');
    const diff = past.diff(now, 'minutes');
    return Math.abs(diff.minutes) < 5;
  }
  
  return { toDateString, isCurrent }
}

components["deployment-badge"] = { template: "#deployment-badge", props: ['deployment'], setup };
</script>
