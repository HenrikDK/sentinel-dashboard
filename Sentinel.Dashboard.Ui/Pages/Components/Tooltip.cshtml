<template id="tooltip">
  <div ref="anchor" :class="padding" @@mouseenter="enter" @@mouseleave="hide">
    <slot name="cell"/>
  </div>

  <div v-if="visible" ref="floating" :style="floatingStyles" role="tooltip"
       class="items-center rounded-md shadow-lg p-2 
            text-black bg-gray-100 z-50
            dark:text-gray-200 dark:bg-zinc-800">
    <transition
      enter-from-class="opacity-0"
      leave-to-class="opacity-0"
      enter-active-class="transition duration-100"
      leave-active-class="transition duration-100"
    >
      <div class="inline-block">
        <slot name="tooltip"/>
      </div>
    </transition>
  </div>

</template>

<script type="module">
import { offset, flip, shift } from "@@floating-ui/dom";
import { useFloating, autoUpdate } from "@@floating-ui/vue";
import { ref, computed } from 'vue';

let setup = (props, ctx) =>{
  const anchor = ref(null);
  const floating = ref(null);
  const visible = ref(false);
  const timer = ref({});
  const offsetAmount = 8;

  let hide = async (e) => {
    visible.value = false;
    
    anchor.value.removeEventListener('mouseleave', hide);
  }

  let enter = async (e) => {
      timer.value = setTimeout(() => show(e), 500);
  }
  
  let show = (e) => {
      if (!anchor.value.matches(':hover')) {
          return;
      }
      
      visible.value = true
      
      anchor.value.addEventListener('mouseleave', hide);                  
  }
  
  const middleware = ref([
    offset(offsetAmount), 
    flip(), 
    shift()
  ]);
  
  const {x, y, strategy, placement, middlewareData } = useFloating(anchor, floating, 
  { 
        placement: props.placement,
        whileElementsMounted: autoUpdate,
        middleware,
  });
  
  const floatingStyles = computed(() => ({
    position: strategy.value,
    top: `${y.value ?? 0}px`,
    left: `${x.value ?? 0}px`
  }));
  
  return {visible, anchor, floating, timer, enter, show, hide, floatingStyles}
}

components["tooltip"] = { template: "#tooltip",
    props: {
      padding: String,
      placement: {
        type: String,
        default: 'bottom'
      }
    },
    setup
};
</script>
