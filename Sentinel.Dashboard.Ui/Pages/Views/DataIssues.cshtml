<template id="data-issues">
  <div class="mt-2">
    <div v-if="issues.length > 0" class="w-full max-w-screen-xl mx-auto">
      <div class="w-full flex justify-between translate-y-2">
        <div class="text-gray-500">Data errors over the last 24 hours</div>
        <a class="text-blue-600 hover:underline" :href="`humio/spaces/${$route.params.space}/environments/${$route.params.env}/queries/data-chart`" target="_blank">Query</a>
      </div>
      <div class="flex">
        <v-chart ref="overview" :option="overviewOptions" :init-options="initOptions" @@finished="populateServices" style="width: 1280px; height: 180px;"/>
      </div>
    </div>
    <div v-else class="flex justify-center">
      <span v-if="updated">No errors found in {{ $route.params.env }}</span>
      <div v-else class="pt-24">
        <spinner></spinner>
      </div>
    </div>
    
    <div class="flex flex-wrap text-sm w-full min-h-[60px] max-w-screen-xl mx-auto py-2" aria-label="Service filter list">
      <template v-for="s in services">
        <button class="bg-transparent font-semibold p-2 border border-solid rounded-xl shadow-md text-black mx-2 my-1
              hover:text-white aria-selected:text-white" 
                :class="['border-[' + s.color + ']', 'hover:bg-[' + s.color + ']', 'aria-selected:bg-[' + s.color + ']' ]"
                @@click="selectService(s.name, false)" @@dblclick="selectService(s.name, true)" :aria-selected="filter.includes(s.name)">
          {{ s.name }}
        </button>
      </template>
    </div>

    <div class="flex justify-center">
    <div v-if="issues.length > 0" class="bg-white w-full max-w-screen-xl mx-auto rounded shadow-md mb-4 relative border border-solid border-gray-300" aria-label="Issue list">
      <div class="sticky z-10 top-0" aria-label="Issue table header">
        <div class="bg-gray-100 py-2 h-11 mx-[-1px] flex rounded-t border-b border-x border-solid border-gray-300 items-center">
          <div class="mx-2 pl-4 flex grow shrink">
            <div class="flex uppercase text-xs font-bold text-gray-500 pr-2">
              Issue
            </div>
            <span class="text-xs text-gray-500 pr-2"> - </span>
            <a class="text-blue-600 text-xs hover:underline" :href="`humio/spaces/${$route.params.space}/environments/${$route.params.env}/queries/data-issues?timeSpan=30days`" target="_blank">Query</a>
          </div>
          <div class="w-[270px] mx-4">
            <div class="flex">
              <div class="uppercase text-xs font-bold text-gray-500">Activity:</div>
              <div class="text-xs font-bold pl-2 text-gray-500">24h</div>
            </div>
          </div>
          <div class="w-20 mx-4 uppercase text-xs font-bold text-gray-500 text-right">24 Hours</div>
          <div class="w-20 mx-4 uppercase text-xs font-bold text-gray-500 text-right">30 Days</div>
        </div>
      </div>

      <div>
        <div v-for="issue in issues" class="leading-4 flex relative border-b border-solid border-gray-300 py-3"
             v-show="filter.includes(issue.service) || filter.length === 0"
             aria-label="Issue Item">
          <div class="ml-4 mr-2 grow shrink w-60 basis-0">
            <div>
              <div class="mb-0.5 leading-4 truncate max-w-full" aria-label="Issue Exception">
                <router-link :to="{ name: 'data-issue', params: { env: $route.params.env, issue: issue.id }, query: $route.query }" aria-label="Issue link">
                  <span>
                    <span class="text-blue-500 font-semibold" v-if="issue.exceptionType">{{ issue.exceptionType }}</span>
                    <span class="text-blue-500 font-semibold" v-else>NoExceptionFound!</span>
                    <span class="w-2.5 inline-block">&nbsp;</span>
                    <span class="text-slate-500 font-light text-[14px] truncate">{{ issue.sourceContext }}</span>
                    <br>
                  </span>
                </router-link>
              </div>
              <div class="flex items-center mb-1.5" aria-label="Exception Message">
                <div v-if="issue.renderedMessage" class="truncate max-w-full text-[14px]">{{ issue.renderedMessage }}</div>
                <div v-else class="truncate max-w-full text-[14px]">{{ issue.messageTemplate }}</div>
              </div>
            </div>
            <div class="flex" aria-label="Issue source information">
              <span class="max-w-full flex text-xs">
                <div type="error" class="h-5 px-2 items-center rounded-2xl inline-flex bg-red-50 border-red-900/30	border">
                  <span type="error">Service: {{ issue.service }}</span>
                </div>
                <div type="error" class="h-5 px-2 items-center rounded-2xl inline-flex bg-green-50 border-green-900/30 border ml-3">
                  <span class="max-w-[215px] truncate" type="version">Version: {{ issue.containerImage.split(':').slice(-1)[0] }}</span>
                </div>
              </span>
              <div class="ml-3 items-center text-gray-700 text-xs flex" aria-label="Last seen & First seen">
                <svg class="mr-1 w-3 h-3 fill-gray-700" viewBox="0 0 16 16"><path d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.52A6.48,6.48,0,1,0,14.48,8,6.49,6.49,0,0,0,8,1.52Z"></path><path d="M11.62,8.75H8A.76.76,0,0,1,7.25,8V2.88a.75.75,0,1,1,1.5,0V7.25h2.87a.75.75,0,0,1,0,1.5Z"></path></svg>
                <time datetime="${lastSeen}" class="underline underline-offset-2 decoration-1 decoration-dotted decoration-gray-500">{{ toTimeAgo(issue.lastSeen) }}</time>
                <span>&nbsp;|&nbsp;</span>
                <time datetime="${firstSeen}" class="underline underline-offset-2 decoration-1 decoration-dotted decoration-gray-500">{{ toTimeAgo(issue.firstSeen) }}</time>
              </div>
            </div>
          </div>
          <div class="w-[270px] h-[55px] mx-4 self-center" aria-label="Issue error events activity graph">
            <div v-if="updated">
              <v-chart :option="miniOptions[issue.id]" :init-options="initOptions" class="w-[270px] h-[55px] relative"></v-chart>
            </div>
            <div v-else>
              <spinner></spinner>
            </div>
          </div>
          <div class="flex justify-end self-center w-20 mx-4" aria-label="Events last 24 Hours">
            <span>{{ issue.events24Hours }}</span>
          </div>
          <div class="flex justify-end self-center w-20 mx-4" aria-label="Events last 30 Days">
            <span>{{ issue.events30Days }}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  </div>
</template>

<script type="module">
  components["data-issues"] = {
     template: "#data-issues",
     data: function () {
        return {
          issues: [],
          services: [],
          filter: [],
          initOptions: { renderer: "svg" },
          overviewOptions: {},
          miniOptions: {},
          updated: false,
        };
     },
     props: [],
     methods: {
        selectService(service, clear = false){
          if (clear){
            this.$data.filter = [];
          }
          if (this.$data.filter.includes(service)){
            this.$data.filter = this.$data.filter.filter(x => x !== service)
          } else{
            this.$data.filter.push(service);
          }
          
          this.$data.overviewOptions.legend.selected = {}
          if (this.$data.filter.length > 0){
            this.$data.services.forEach(x => {
              this.$data.overviewOptions.legend.selected[x.name] = this.$data.filter.includes(x.name);
            })
          } else {
            this.$data.services.forEach(x => {
              this.$data.overviewOptions.legend.selected[x.name] = true;
            })
          }
        },
        toTimeAgo(value){
          return moment(value).fromNow();
        },
        populateServices(){
          if (this.$data.services && this.$data.services.length > 0 ) return;
          let chart = this.$refs.overview.chart;
          let series = chart.getModel().getSeries();
          let services = series
                    .map(s => { return { name: s.name, color: chart.getVisual({seriesIndex: s.seriesIndex }, 'color')}})
                    .sort(x => x.name);
          
          this.$data.services = services;
        },
        resetView(){
          this.$data.issues = [];
          this.$data.services = [];
          this.$data.filter = [];
          this.$data.overviewOptions = {};
          this.$data.miniOptions = {};
          this.$data.updated = false;
        },
        async loadMiniChart(space, env, issue){
            let options = await fetch(`/api/spaces/${space}/environments/${env}/data-issues/${issue}`)
                .then(r => r.json())
                .then(json => buildOverviewMiniChart(json.categories, json.series));
            return {options, issue}
        },
        async initView(){
          let env = this.$route.params.env;
          let space = this.$route.params.space;
          
          const [activityOption, issues] = await Promise.all([
            fetch(`/api/spaces/${space}/environments/${env}/data-issues/graph`)
              .then(r => r.json())
              .then(json => buildOverviewChart(json.categories, json.series)),
            
            fetch(`/api/spaces/${space}/environments/${env}/data-issues`)
            .then(r => r.json()),
          ]);
          
          let optionRequests = issues.map(issue => {
            this.$data.miniOptions[issue.id] = {};
            return this.loadMiniChart(space, env, issue.id)
          })
  
          this.$data.issues = issues;
          this.$data.overviewOptions = activityOption
          
          Promise
          .all(optionRequests)
          .then(results => {
            results.map(x => {
                this.$data.miniOptions[x.issue] = x.options;
              });
            this.$data.updated = true;
          })
          .catch(e => {console.error(e);});
        }
     },
     watch: {
        async '$route' () {
            this.resetView();
            await this.initView();
         }
     },
     async mounted () {
        await this.initView();
     }
  };
  
  routes.push({path:'/spaces/:space/environments/:env/data-issues', name: "data-issues", component: components["data-issues"]})    
</script>
