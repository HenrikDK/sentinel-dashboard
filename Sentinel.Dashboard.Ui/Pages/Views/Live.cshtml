<template id="live">
  <div class="flex flex-col w-fit mx-auto max-w-screen-2xl justify-start">

    <template v-if="spaces.length > 0">
      <div class="mt-4 mb-2">Filters: </div>
      <div class="w-full flex flex-wrap mb-4">
        <router-link :to="{ name: 'live', query: $route.query }">
          <div class="rounded mx-1 p-1 border border-gray-300 hover:border-sky-600 hover:text-sky-800 hover:bg-sky-200/[.3]">
            Live Changes
          </div>
        </router-link>
        
        <template v-for="ns in spaces">
          <router-link :to="{ name: 'deployments-namespace', params: { env: ns.namespace, space: ns.space }, query: $route.query }">
            <div class="rounded mx-1 p-1 border border-gray-300 hover:border-sky-600 hover:text-sky-800 hover:bg-sky-200/[.3]">
              {{ ns.namespace?.toUpperCase() }}
            </div>
          </router-link>
        </template>
      </div>
    </template>
    
    <div class="overflow-hidden bg-white rounded shadow-md my-4 border border-solid max-w-screen-2xl border-gray-300 w-full"
         aria-label="Spaces">
      <div class="overflow-auto w-fit">
        <div class="bg-gray-200 py-2 h-8 flex rounded-t border-solid border-gray-300 items-center" aria-label="Space header">
          <div class="pl-2 w-64">
            <div class="font-bold text-gray-600">
              Live Changes
            </div>
          </div>

          <template v-for="e in ns.environments">
            <div v-if="e != 'prd'"
                 class="pl-3 flex w-60 text-gray-500">
              {{ e.toUpperCase() }}
            </div>
            <div v-else class="pl-3 flex w-60 justify-between items-center">
              <div class="text-gray-500">
                {{ e.toUpperCase() }}
              </div>
              <div class="mr-2 font-bold text-gray-600">
                <template v-if="loading">
                  <spinner styling="inline w-5 h-5 text-gray-200 animate-spin fill-gray-400"></spinner>
                </template>
              </div>
            </div>
          </template>
        </div>
        
        <template v-if="Object.keys(this.repositories).length > 0">
          <template v-if="showHeader() && activity.alerts.length > 0">
            <div class="sticky left-0 bg-red-600 text-white font-bold text-sm pl-4 items-center w-64">
              Alerts
            </div>
          </template>
          
          <template v-for="a in activity.alerts">
            <deployment-bar :expanded="expanded" :ns="ns" :repository="repositories[a]" @@toggle-details="(e) => toggleDetails(e)"></deployment-bar>
          </template>
        </template>
        
        <template v-if="showHeader() && activity.warnings.length > 0">
          <td class="sticky left-0 bg-orange-500 text-white font-bold text-sm pl-4 items-center w-64">
            Missing Metrics
          </td>
        </template>
        
        <template v-for="w in activity.warnings">
          <deployment-bar :expanded="expanded" :ns="ns" :repository="repositories[w]" @@toggle-details="(e) => toggleDetails(e)"></deployment-bar>
        </template>
        
        <template v-if="showHeader() && activity.deploying.length > 0">
          <div class="sticky left-0 bg-green-600 text-white font-bold text-sm pl-4 items-center w-64">
            Deploying
          </div>
        </template>
        
        <template v-for="d in activity.deploying">
          <deployment-bar :expanded="expanded" :ns="ns" :repository="repositories[d]" @@toggle-details="(e) => toggleDetails(e)"></deployment-bar>
        </template>
      </div>
    </div>
  </div>
</template>

<script type="module">
import { ref, watch, onMounted } from 'vue'

let setup = (props, ctx) => {
  const ns = ref({
    environments: ['sit', 'dev', 'tst', 'uat', 'prd']
  });
  const activity = ref({
    alerts: [],
    warnings: [],
    deploying: [],
  });
  const loading = ref(true);
  const timer = ref('')
  const repositories = ref([]);
  const expanded = ref({});
  const alerts = ref([]);
  const deployments = ref([]);
  
  let showHeader = () => {
    if (activity.value.alerts.length > 0 && activity.value.warnings.length > 0) return true;
    if (activity.value.alerts.length > 0 && activity.value.deploying.length > 0) return true;
    if (activity.value.warnings.length > 0 && activity.value.deploying.length > 0) return true;
    return false;
  }
  
  let toggleDetails = (value) => {
    if (value in expanded.value){
      expanded.value[value] = !expanded.value[value];
    }else{
      expanded.value[value] = true;
    }
  }

  let isCurrent = (value) => {
    const now = luxon.DateTime.local();
    const past = luxon.DateTime.fromSeconds(Number(value)).setLocale('da-dk');
    const diff = past.diff(now, 'minutes');
    return Math.abs(diff.minutes) < 5;
  }
  
  let updateModel = () => {
    let grouped = _.groupBy(deployments.value, x => x.metric.github_org + '/' + x.metric.github_repository)
                
    let results = {};
    Object.keys(grouped).sort().forEach(g => {
      let repository_pods = grouped[g];
      let environments = Array.from(new Set(repository_pods.map(x => x.metric.aks_environment)));
      let names = Array.from(new Set(repository_pods.map(x => x.metric.aks_name))).sort();
      let summary = {
          'workloads': names,
      }
      
      let repository = {
          'name': g,
          'matched': true,
          'space': repository_pods[0].metric.aks_space,
          'namespace': repository_pods[0].metric.namespace.split('-')[0],
          'environments': environments,
          'workloads': [],
          'summary': summary
      }
      
      names.forEach(x => {
        let instances = repository_pods.filter(v => v.metric.aks_name === x)
        let alarms = alerts.value.filter(a => a.metric.aks_name === x )
        
        let result = {
          'name': x,
          'instances': instances, 
        }
        
        environments.forEach(e => {
          let working = instances.filter(i => i.metric.aks_environment === e && i.value[1] === '1');
          let missing = instances.filter(i => i.metric.aks_environment === e && i.value[1] === '0');
          
          let metrics = true;
          if (working.length === 0 && missing.length > 0){
            metrics = false;
          }
          
          let most_recent = instances.filter(i => i.metric.aks_environment === e).sort((a, b) => (a.metric.aks_deployed < b.metric.aks_deployed ? -1 : 1))[0]
          
          result[e] = {
            'instance': most_recent,
            'metrics': metrics,
            'alerts': alarms.filter(a => a.metric.aks_environment === e)
          };
        })
        
        repository.workloads.push(result)
      });
      
      environments.forEach(e => {
          let missing = repository.workloads.some(w => w[e].metrics === false);
          summary[e] = {
            'instance': repository.workloads.map(w => w[e].instance).sort((a, b) => (a.metric.aks_deployed < b.metric.aks_deployed ? -1 : 1))[0],
            'metrics': !missing,
            'alerts': alerts.value.filter(a => (a.metric.github_org + '/' + a.metric.github_repository) === g && a.metric.aks_environment === e)
          }
      })
      
      results[repository.name] = repository;
    })
    
    let alarms = alerts.value.map(x => x.metric.github_org + '/' + x.metric.github_repository).sort();
    alarms = Array.from(new Set(alarms));
    activity.value.alerts = alarms;
    
    let gRepositories = Object.entries(results).map(r => r[1]);
    let warnings = gRepositories.filter(r => Object.entries(r.summary).some(s => s[1]?.metrics === false)).map(x => x.name).sort();
    warnings = warnings.filter(x => !alarms.includes(x));
    activity.value.warnings = warnings;
    
    let deploying = deployments.value.filter(x => isCurrent(x.metric.aks_deployed)).map(x => x.metric.github_org + '/' + x.metric.github_repository).sort();
    deploying = Array.from(new Set(deploying));
    deploying = deploying.filter(x => !alarms.includes(x) && !warnings.includes(x));
    activity.value.deploying = deploying;
    
    repositories.value = results;
    loading.value = false;
  }
  
  let fetchData = () => {
    loading.value = true;
    fetch("/api/deployments")
      .then(r => r.json())
      .then(j => {
        if (j.status === "success"){
            deployments.value = j.data.result
        }
    });
    
    fetch("/api/alerts")
      .then(r => r.json())
      .then(j => {
        if (j.status === "success"){
            alerts.value = j.data.result
        }
    });
  }
  
  watch(deployments, () => {
    updateModel();
  })

  watch(alerts, () => {
    updateModel();
  })
  
  onMounted(async () => {
    fetchData();
    
    timer.value = setInterval(fetchData, 15000);
  })
    
  return {
    ns, activity, loading, repositories, expanded, alerts, deployments,
    showHeader, toggleDetails, isCurrent, updateModel, fetchData
  }
}

let destroy = () => {
  clearInterval(timer.value)
}

components["live"] = { template: "#live", setup, destroy };
    
routes.push({path:'/live', name:"live", component: components["live"]});
</script>

<style>
</style>