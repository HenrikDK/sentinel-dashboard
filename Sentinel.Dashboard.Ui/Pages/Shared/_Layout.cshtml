<!DOCTYPE html>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<link rel="icon" href="favicon.svg" asp-append-version="true">
<link rel="mask-icon" href="favicon.svg" color="#326ce5">
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.21"></script>
    <script src="https://cdn.jsdelivr.net/npm/moment@2.29.3"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.4"></script>

    <script src="https://cdn.tailwindcss.com"></script>
    
    <script>
      var components = {};
      var routes = []
      
      tailwind.config = {
        theme: {
          extend: {
            colors: {
              brand: '#326ce5',
            },
            keyframes: {
              wiggle: {
                '0%, 100%': { transform: 'rotate(-3deg)' },
                '50%': { transform: 'rotate(3deg)' },
              }
            }
          }
        }
      }
    </script>

    <script type="importmap">
    {
      "imports": {
        "vue": "https://cdn.jsdelivr.net/npm/vue@3.3.4/dist/vue.esm-browser.js",
        "@@vue/devtools-api": "https://cdn.jsdelivr.net/npm/@@vue/devtools-api@6.5.0/lib/esm/index.min.js",
        
        "@@floating-ui/core": "https://cdn.jsdelivr.net/npm/@@floating-ui/core@1.2.4/dist/floating-ui.core.browser.min.mjs",
        "@@floating-ui/dom": "https://cdn.jsdelivr.net/npm/@@floating-ui/dom@1.2.4/dist/floating-ui.dom.browser.min.mjs",
        "floating-ui/vue": "https://cdn.jsdelivr.net/npm/@@floating-ui/vue@1.0.1/dist/floating-ui.vue.mjs",
        
        "vue-router": "https://cdn.jsdelivr.net/npm/vue-router@4.2.2/dist/vue-router.esm-browser.js",
        
        "vue-echarts": "https://cdn.jsdelivr.net/npm/vue-echarts@6.6.0/dist/index.esm.min.js",
        "vue-demi": "https://cdn.jsdelivr.net/npm/vue-demi@0.14.5/lib/index.mjs",
        "resize-detector": "https://cdn.jsdelivr.net/npm/resize-detector@0.3.0/esm/index.js",
        "echarts/core": "https://cdn.jsdelivr.net/npm/echarts@5.4.2/dist/echarts.esm.min.js"
      }
    }
    </script>

    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <script src="~/js/site.js" asp-append-version="true"></script>
</head>
<body>

<div class="scroll-mt-14 w-full" id="app">
  @RenderBody()
</div>

@RenderSection("VueComponents", required: false)

@RenderSection("Scripts", required: false)

<script type="module">
import { createApp, ref, watch, onMounted } from 'vue'
import { createRouter, createWebHashHistory, useRoute } from 'vue-router'
import { default as ECharts } from 'vue-echarts'

const router = createRouter({
  history: createWebHashHistory(),
  routes
})

let setup = () => {
  const route = useRoute()
  const search = ref('');
  const timer = ref('');
  const spaces = ref([]);
  const environments = ref([]);
  
  let loadEnvironments = () => {
    fetch("/api/environments")
      .then(r => r.json())
      .then(j => {
        if (j.status === "success"){
          environments.value = j.data.result
        }
      });
  }
  
  let updateSpaces = () => {
    let grouped = _.groupBy(environments.value, x => x.metric.aks_space);
    let types = ['prd','uat','tst','dev', 'sit'];
    let gSpaces = [];
    Object.keys(grouped).sort().forEach(g => {
      let metrics = grouped[g];
      let roots = metrics.map(x => x.metric.namespace.split('-')[0]);
      roots = Array.from(new Set(roots)).sort();
      roots.forEach(r => {
        let namespace = {
          'space': g,
          'root': r,
          'environments': []
        }
        
        types.forEach(x => {
          let matches = metrics.filter(m => m.metric.namespace === r + "-" + x)
          if (matches.length > 0){
            namespace.environments.push(matches[0].metric.namespace);
          }
        });
        
        gSpaces.push(namespace)
      });
      
    });
    
    spaces.value = gSpaces;
  }

  watch(environments, () => {
    updateSpaces();
  });
  
  onMounted(async () => {
    loadEnvironments();
    
    timer.value = setInterval(loadEnvironments, 30000);
  });
  
  return {
    search, spaces, environments,
    loadEnvironments, updateSpaces
  }
}

let destroy = () => {
  clearInterval(this.timer)
}

const app = createApp({setup, destroy});

app.component('v-chart', ECharts)

Object.entries(components).forEach(([k,v]) =>{
  app.component(k, v)
});

app.use(router)
app.mount('#app');
</script>
</body>
</html>